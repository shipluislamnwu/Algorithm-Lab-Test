/// Knapsack
#include<iostream>
using namespace std;

struct items {
    float weight;
    float profit;
    float wpp; // profit per weight
};

void insertionSort(items arr[], int n) {
    for (int i = 1; i < n; i++) {
        items key = arr[i];
        int j = i - 1;

        // Sort in descending order by wpp
        while (j >= 0 && arr[j].wpp < key.wpp) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

float fractionalknapsack(items item[], int n, float capacity) {
    insertionSort(item, n);
    float total_profit = 0.0;
    float wt_taken = 0.0;

    for (int i = 0; i < n; i++) {
        if (wt_taken + item[i].weight <= capacity) {
            total_profit += item[i].profit;
            wt_taken += item[i].weight;
        } else {
            float remain = capacity - wt_taken;
            total_profit += remain * item[i].wpp;
            break; // knapsack full
        }
    }

    return total_profit;
}

int main() {
    int n;
    float capacity;

    cout << "Enter number of items: ";
    cin >> n;

    items item[n];
    cout << "Enter weight and profit of each item:\n";
    for (int i = 0; i < n; i++) {
        cin >> item[i].weight >> item[i].profit;
        item[i].wpp = item[i].profit / item[i].weight;
    }

    cout << "Enter knapsack capacity: ";
    cin >> capacity;

    float maxprofit = fractionalknapsack(item, n, capacity);
    cout << "Max profit: " << maxprofit << endl;

    return 0;
}
